#!/usr/bin/env python3
"""
Vietnamese AI Dubbing - Web UI v·ªõi Gradio
Giao di·ªán web ƒë∆°n gi·∫£n cho vi·ªác l·ªìng ti·∫øng video
"""

import gradio as gr
import os
from pathlib import Path
from main import VietnameseAIDubbing
from config.settings import settings
import logging

logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o dubbing instance
dubbing = VietnameseAIDubbing()

def process_video_gradio(video_input, translator_method, voice_name, output_name):
    """Function x·ª≠ l√Ω video cho Gradio interface"""

    def progress_callback(progress, message):
        # Update progress bar
        progress_bar = gr.Progress()
        progress_bar(progress/100, desc=message)
        return f"{progress:.1f}% - {message}"

    dubbing.set_progress_callback(progress_callback)

    # Validate inputs
    if video_input is None:
        return None, "‚ùå Vui l√≤ng upload video ho·∫∑c nh·∫≠p URL"

    # X·ª≠ l√Ω input
    if isinstance(video_input, str) and video_input.startswith(('http://', 'https://')):
        video_path = video_input
    elif hasattr(video_input, 'name'):
        video_path = video_input.name
    else:
        return None, "‚ùå Input kh√¥ng h·ª£p l·ªá"

    try:
        result = dubbing.process_video(
            video_input=video_path,
            translator_method=translator_method,
            voice_name=voice_name,
            output_name=output_name
        )

        if result["success"]:
            final_video = result["final_video"]
            subtitle_file = result["subtitle_file"]

            # Tr·∫£ v·ªÅ video v√† message th√†nh c√¥ng
            return (
                final_video,
                f"‚úÖ Ho√†n th√†nh!\n\nüìπ Video: {os.path.basename(final_video)}\nüìù Ph·ª• ƒë·ªÅ: {os.path.basename(subtitle_file)}"
            )
        else:
            return None, f"‚ùå L·ªói: {result['error']}"

    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω: {str(e)}")
        return None, f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}"

def preview_voice(voice_name):
    """T·∫°o preview audio cho voice"""
    try:
        preview_path = text_to_speech.preview_voice(voice_name)
        return preview_path
    except Exception as e:
        return f"‚ùå L·ªói t·∫°o preview: {str(e)}"

# T·∫°o Gradio interface
def create_ui():
    """T·∫°o giao di·ªán Gradio"""

    with gr.Blocks(
        title="Vietnamese AI Dubbing",
        theme=gr.themes.Soft(),
        css="""
        .gradio-container {
            max-width: 1200px;
            margin: auto;
        }
        .title {
            text-align: center;
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 1em;
            color: #2563eb;
        }
        """
    ) as interface:

        gr.HTML("""
        <div class="title">
            üé¨ Vietnamese AI Dubbing<br>
            <small style="font-size: 0.6em; color: #666;">C√¥ng c·ª• l·ªìng ti·∫øng video t·ª± ƒë·ªông sang ti·∫øng Vi·ªát</small>
        </div>
        """)

        with gr.Tabs():

            # Tab ch√≠nh: Dubbing
            with gr.TabItem("üé• L·ªìng ti·∫øng Video"):

                with gr.Row():

                    with gr.Column(scale=1):

                        # Input section
                        gr.Markdown("### üì• Input Video")

                        input_type = gr.Radio(
                            ["Upload File", "YouTube URL"],
                            label="Ch·ªçn lo·∫°i input",
                            value="Upload File"
                        )

                        video_file = gr.File(
                            label="Upload Video",
                            file_types=[".mp4", ".avi", ".mov", ".mkv", ".webm"],
                            visible=True
                        )

                        video_url = gr.Textbox(
                            label="YouTube URL",
                            placeholder="https://www.youtube.com/watch?v=...",
                            visible=False
                        )

                        def toggle_input(input_type):
                            if input_type == "Upload File":
                                return gr.update(visible=True), gr.update(visible=False)
                            else:
                                return gr.update(visible=False), gr.update(visible=True)

                        input_type.change(
                            toggle_input,
                            inputs=input_type,
                            outputs=[video_file, video_url]
                        )

                        # Settings section
                        gr.Markdown("### ‚öôÔ∏è C√†i ƒë·∫∑t")

                        translator_method = gr.Dropdown(
                            choices=settings.TRANSLATION_METHODS,
                            value=settings.DEFAULT_TRANSLATOR,
                            label="Ph∆∞∆°ng th·ª©c d·ªãch",
                            info="Ch·ªçn c√°ch d·ªãch: Google Translate (free), OpenRouter API, ho·∫∑c Ollama local"
                        )

                        voice_name = gr.Dropdown(
                            choices=settings.VIETNAMESE_VOICES,
                            value=settings.DEFAULT_VOICE,
                            label="Gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát",
                            info="Ch·ªçn gi·ªçng EdgeTTS cho ti·∫øng Vi·ªát"
                        )

                        output_name = gr.Textbox(
                            label="T√™n file output (t√πy ch·ªçn)",
                            placeholder="video_dubbed_vi.mp4",
                            info="ƒê·ªÉ tr·ªëng ƒë·ªÉ d√πng t√™n m·∫∑c ƒë·ªãnh"
                        )

                        # Process button
                        process_btn = gr.Button(
                            "üöÄ B·∫Øt ƒë·∫ßu l·ªìng ti·∫øng",
                            variant="primary",
                            size="lg"
                        )

                    with gr.Column(scale=1):

                        # Output section
                        gr.Markdown("### üì§ K·∫øt qu·∫£")

                        output_video = gr.Video(
                            label="Video ƒë√£ l·ªìng ti·∫øng",
                            interactive=False
                        )

                        status_text = gr.Textbox(
                            label="Tr·∫°ng th√°i",
                            lines=5,
                            interactive=False,
                            placeholder="Ch·ªù x·ª≠ l√Ω..."
                        )

                        # Preview voice section
                        gr.Markdown("### üîä Preview Gi·ªçng")
                        preview_btn = gr.Button("üéµ Nghe th·ª≠ gi·ªçng", size="sm")
                        preview_audio = gr.Audio(
                            label="Audio Preview",
                            interactive=False
                        )

                # Event handlers
                process_btn.click(
                    process_video_gradio,
                    inputs=[video_file, translator_method, voice_name, output_name],
                    outputs=[output_video, status_text]
                ).then(
                    lambda: gr.update(value=""),
                    outputs=[],
                    js="() => {document.querySelector('video')?.load()}"
                )

                preview_btn.click(
                    preview_voice,
                    inputs=[voice_name],
                    outputs=[preview_audio]
                )

            # Tab: Th√¥ng tin
            with gr.TabItem("‚ÑπÔ∏è Th√¥ng tin"):

                gr.Markdown("""
                ## Vietnamese AI Dubbing

                C√¥ng c·ª• AI t·ª± ƒë·ªông l·ªìng ti·∫øng video sang ti·∫øng Vi·ªát v·ªõi ch·∫•t l∆∞·ª£ng cao.

                ### T√≠nh nƒÉng ch√≠nh:
                - üé• **T·ª± ƒë·ªông download** t·ª´ YouTube/TikTok
                - üéµ **T√°ch vocals** kh·ªèi background music
                - üé§ **Nh·∫≠n d·∫°ng gi·ªçng n√≥i** v·ªõi FunASR
                - üåê **D·ªãch ƒëa ph∆∞∆°ng th·ª©c** (Google, OpenRouter, Ollama)
                - üîä **T·ªïng h·ª£p gi·ªçng** v·ªõi EdgeTTS ti·∫øng Vi·ªát
                - üé¨ **Gh√©p video final** v·ªõi ph·ª• ƒë·ªÅ

                ### C√°ch s·ª≠ d·ª•ng:
                1. Upload video ho·∫∑c paste URL
                2. Ch·ªçn ph∆∞∆°ng th·ª©c d·ªãch v√† gi·ªçng ƒë·ªçc
                3. Click "B·∫Øt ƒë·∫ßu l·ªìng ti·∫øng"
                4. T·∫£i video k·∫øt qu·∫£

                ### L∆∞u √Ω:
                - Video qu√° d√†i c√≥ th·ªÉ t·ªën th·ªùi gian x·ª≠ l√Ω
                - C·∫ßn c·∫•u h√¨nh API keys cho OpenRouter/Ollama
                - K·∫øt qu·∫£ ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng audio g·ªëc
                """)

                # Hi·ªÉn th·ªã available methods
                available_methods = translator.get_available_methods()
                gr.Markdown(f"**Ph∆∞∆°ng th·ª©c d·ªãch c√≥ s·∫µn:** {', '.join(available_methods)}")

            # Tab: Logs (n·∫øu c·∫ßn)
            with gr.TabItem("üìã Logs"):
                log_text = gr.Textbox(
                    label="Processing Logs",
                    lines=20,
                    interactive=False,
                    value="Logs s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y khi x·ª≠ l√Ω..."
                )

    return interface

def main():
    """Ch·∫°y web UI"""
    interface = create_ui()

    # Launch v·ªõi settings
    interface.queue(max_size=10)  # Queue ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu request
    interface.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,  # Set True ƒë·ªÉ public URL
        show_error=True,
        quiet=False
    )

if __name__ == "__main__":
    main()